{
  "scopeName": "source.cyrus",
  "name": "Cyrus",
  "fileTypes": ["cyrus"],
  "patterns": [
    { "include": "#comments" },
    { "include": "#strings" },
    { "include": "#suffixed-numbers" },
    { "include": "#decimal-numbers" },
    { "include": "#keywords" },
    { "include": "#types" },
    { "include": "#type-annotations" },
    { "include": "#namespaces" },
    { "include": "#enum-members" },
    { "include": "#properties" },
    { "include": "#functions" },
    { "include": "#variables" },
    { "include": "#parameters" },
    { "include": "#operators" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        { "match": "//.*$", "name": "comment.line.double-slash.cyrus" },
        { "begin": "/\\*", "end": "\\*/", "name": "comment.block.cyrus" }
      ]
    },
    "strings": {
      "patterns": [
        { "begin": "\"", "end": "\"", "name": "string.quoted.double.cyrus" },
        { "begin": "'", "end": "'", "name": "string.quoted.single.cyrus" }
      ]
    },
    "suffixed-numbers": {
      "patterns": [
        {
          "match": "\\b[0-9][0-9_]*(int(8|16|32|64|128)|float(16|32|64|128))\\b",
          "name": "constant.numeric.suffixed.cyrus"
        }
      ]
    },
    "decimal-numbers": {
      "patterns": [
        {
          "match": "\\b[0-9][0-9_]*(\\.[0-9_]+)?([eE][+-]?[0-9_]+)?\\b",
          "name": "constant.numeric.decimal.cyrus"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "match": "\\b(if|else|for|while|switch|case|break|continue|return|pub|defer|fn|import|from|as|var|const|type|class|struct|enum|interface|macro|event|new|delete|throw|try|catch|finally|extends|implements|public|private|protected|static|export|use)\\b",
          "name": "keyword.control.cyrus"
        },
        {
          "match": "\\b(true|false|null|undefined)\\b",
          "name": "constant.language.cyrus"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "match": "\\b(int|int8|int16|int32|int64|int128|uint|uint8|uint16|uint32|uint64|uint128|intptr|uintptr|size_t|float16|float32|float64|float128|bool|char|void|string|any)\\b",
          "name": "storage.type.builtin.cyrus"
        },
        {
          "match": "\\b(type|struct|enum|interface|class)\\s+([A-Za-z_][A-Za-z0-9_]*)",
          "captures": { "2": { "name": "entity.name.type.cyrus" } }
        }
      ]
    },
    "type-annotations": {
      "patterns": [
        {
          "match": ":(\\s*)(int8|int16|int32|int64|int128|uint8|uint16|uint32|uint64|uint128|float16|float32|float64|float128|bool|char|string|void|any)",
          "captures": {
            "2": { "name": "storage.type.builtin.cyrus" }
          }
        }
      ]
    },
    "namespaces": {
      "patterns": [
        {
          "match": "\\b([A-Za-z_][A-Za-z0-9_]*)::",
          "captures": {
            "1": { "name": "support.namespace.cyrus" },
            "0": { "name": "punctuation.separator.namespace.cyrus" }
          }
        },
        {
          "match": "::([A-Za-z_][A-Za-z0-9_]*)",
          "captures": {
            "1": { "name": "support.namespace.cyrus" },
            "0": { "name": "punctuation.separator.namespace.cyrus" }
          }
        }
      ]
    },
    "enum-members": {
      "patterns": [
        {
          "match": "\\b([A-Za-z_][A-Za-z0-9_]*)::([A-Za-z_][A-Za-z0-9_]*)\\b",
          "captures": {
            "1": { "name": "support.namespace.cyrus" },
            "2": { "name": "constant.other.enum-member.cyrus" }
          }
        }
      ]
    },
    "properties": {
      "patterns": [
        {
          "match": "\\.([A-Za-z_][A-Za-z0-9_]*)",
          "captures": { "1": { "name": "variable.other.property.cyrus" } }
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "match": "\\bfn\\s+([A-Za-z_][A-Za-z0-9_]*)",
          "captures": { "1": { "name": "entity.name.function.cyrus" } }
        },
        {
          "match": "\\bmacro\\s+([A-Za-z_][A-Za-z0-9_]*)",
          "captures": {
            "1": { "name": "entity.name.function.preprocessor.cyrus" }
          }
        },
        {
          "match": "\\b(?!(if|else|for|while|return|switch|case|break|continue|fn|var|const|macro|type|class|enum|interface)\\b)([A-Za-z_][A-Za-z0-9_]*)\\s*(?=\\()",
          "captures": { "2": { "name": "entity.name.function.member.cyrus" } }
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "match": "\\bvar\\s+([A-Za-z_][A-Za-z0-9_]*)\\b",
          "captures": { "1": { "name": "variable.other.readwrite.cyrus" } }
        },
        {
          "match": "\\bconst\\s+([A-Za-z_][A-Za-z0-9_]*)\\b",
          "captures": { "1": { "name": "variable.other.constant.cyrus" } }
        },
        {
          "match": "\\b(?!(if|else|for|while|switch|case|return|fn|var|const|macro|import|from|as|type|struct|enum|interface|class|new|delete|throw|try|catch|finally)\\b)([A-Za-z_][A-Za-z0-9_]*)(?!\\s*::)(?!\\s*\\()\\b",
          "captures": { "2": { "name": "variable.other.readwrite.cyrus" } }
        }
      ]
    },
    "parameters": {
      "patterns": [
        {
          "match": "\\b([A-Za-z_][A-Za-z0-9_]*)\\s*:",
          "captures": { "1": { "name": "variable.parameter.cyrus" } }
        },
        {
          "match": ":\\s*(int|int32|float64|char\\*|bool|string|void|any)",
          "captures": { "1": { "name": "storage.type.builtin.cyrus" } }
        }
      ]
    },
    "operators": {
      "patterns": [
        { "match": "=", "name": "keyword.operator.assignment.cyrus" },
        { "match": ":", "name": "keyword.operator.colon.cyrus" },
        { "match": "&", "name": "keyword.operator.bitwise.and.cyrus" },
        { "match": "\\*", "name": "keyword.operator.pointer.cyrus" }
      ]
    }
  }
}
